#!/usr/bin/env node
import { mkdirSync, writeFileSync } from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const {
  SUPABASE_DATABASE_URL = '',
  SUPABASE_ANON_KEY = '',
  SUPABASE_PUBLIC_ANON_KEY = '',
  NEXT_PUBLIC_SUPABASE_URL = '',
  NEXT_PUBLIC_SUPABASE_DATABASE_URL = '',
  NEXT_PUBLIC_SUPABASE_ANON_KEY = '',
  SUPABASE_SERVICE_ROLE_KEY = ''
} = process.env;

const resolvedUrl =
  SUPABASE_DATABASE_URL || NEXT_PUBLIC_SUPABASE_URL || NEXT_PUBLIC_SUPABASE_DATABASE_URL;
const resolvedAnonKey =
  SUPABASE_ANON_KEY || SUPABASE_PUBLIC_ANON_KEY || NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!resolvedUrl || !resolvedAnonKey) {
  console.warn('Warning: SUPABASE_DATABASE_URL and/or SUPABASE_ANON_KEY are not set.');
}

if (SUPABASE_SERVICE_ROLE_KEY) {
  console.info('Supabase service role key detected; it will not be written to the client bundle.');
}

const envPayload = {
  SUPABASE_DATABASE_URL: resolvedUrl,
  NEXT_PUBLIC_SUPABASE_URL: resolvedUrl,
  NEXT_PUBLIC_SUPABASE_DATABASE_URL: resolvedUrl,
  SUPABASE_ANON_KEY: resolvedAnonKey,
  NEXT_PUBLIC_SUPABASE_ANON_KEY: resolvedAnonKey
};

const content = `// Generated by scripts/generate-env.js
export const SUPABASE_DATABASE_URL = ${JSON.stringify(resolvedUrl)};
export const SUPABASE_ANON_KEY = ${JSON.stringify(resolvedAnonKey)};
export const NEXT_PUBLIC_SUPABASE_URL = ${JSON.stringify(resolvedUrl)};
export const NEXT_PUBLIC_SUPABASE_DATABASE_URL = ${JSON.stringify(resolvedUrl)};
export const NEXT_PUBLIC_SUPABASE_ANON_KEY = ${JSON.stringify(resolvedAnonKey)};

if (typeof window !== 'undefined') {
  window._env_ = ${JSON.stringify(envPayload, null, 2)};
}
`;

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const dest = path.join(__dirname, '..', 'assets', 'js', 'env.js');
mkdirSync(path.dirname(dest), { recursive: true });
writeFileSync(dest, content);
console.log('Environment file generated at', dest);
