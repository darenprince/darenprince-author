#!/usr/bin/env node
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

const DOTENV_CANDIDATES = ['.env.local', '.env']

const sanitizeValue = (value = '') => {
  let result = value.trim()
  if (!result) return ''
  if (result.startsWith('export ')) {
    result = result.slice('export '.length).trim()
  }
  if (
    (result.startsWith('"') && result.endsWith('"')) ||
    (result.startsWith("'") && result.endsWith("'"))
  ) {
    result = result.slice(1, -1)
  }
  if (result.startsWith('<') && result.endsWith('>')) {
    result = result.slice(1, -1).trim()
  }
  return result
}

const parseDotEnvFile = (filePath) => {
  if (!existsSync(filePath)) {
    return {}
  }

  const content = readFileSync(filePath, 'utf8')
  const entries = {}

  for (const line of content.split(/\r?\n/)) {
    const trimmed = line.trim()
    if (!trimmed || trimmed.startsWith('#')) continue

    const equalsIndex = trimmed.indexOf('=')
    if (equalsIndex === -1) continue

    const key = trimmed
      .slice(0, equalsIndex)
      .trim()
      .replace(/^export\s+/, '')
    const value = sanitizeValue(trimmed.slice(equalsIndex + 1))
    if (!key) continue
    entries[key] = value
  }

  return entries
}

const loadEnvFromFiles = () => {
  const envFromFiles = {}
  for (const file of DOTENV_CANDIDATES) {
    const parsed = parseDotEnvFile(file)
    Object.assign(envFromFiles, parsed)
  }
  return envFromFiles
}

const env = {
  ...loadEnvFromFiles(),
  ...process.env,
}

const getFirstDefined = (...keys) => {
  for (const key of keys) {
    const value = env?.[key]
    if (value !== undefined && value !== null && `${value}`.trim() !== '') {
      return `${value}`.trim()
    }
  }
  return ''
}

const resolvedUrl = getFirstDefined(
  'SUPABASE_DATABASE_URL',
  'SUPABASE_URL',
  'NEXT_PUBLIC_SUPABASE_URL',
  'NEXT_PUBLIC_SUPABASE_DATABASE_URL',
  'PUBLIC_SUPABASE_URL'
)

const resolvedAnonKey = getFirstDefined(
  'SUPABASE_ANON_KEY',
  'SUPABASE_PUBLIC_ANON_KEY',
  'NEXT_PUBLIC_SUPABASE_ANON_KEY',
  'PUBLIC_SUPABASE_PUBLISHABLE_KEY',
  'PUBLIC_SUPABASE_ANON_KEY'
)

const resolvedServiceKey = getFirstDefined(
  'SUPABASE_SERVICE_ROLE_KEY',
  'SUPABASE_SERVICE_KEY',
  'SUPABASE_SERVICE_ROLE',
  'SUPABASE_SERVICE_API_KEY'
)

if (!resolvedUrl || !resolvedAnonKey) {
  console.warn('Warning: SUPABASE_DATABASE_URL and/or SUPABASE_ANON_KEY are not set.')
}

if (resolvedServiceKey) {
  console.info('Supabase service role key detected; it will not be written to the client bundle.')
}

const envPayload = {
  SUPABASE_DATABASE_URL: resolvedUrl,
  SUPABASE_URL: resolvedUrl,
  NEXT_PUBLIC_SUPABASE_URL: resolvedUrl,
  NEXT_PUBLIC_SUPABASE_DATABASE_URL: resolvedUrl,
  SUPABASE_ANON_KEY: resolvedAnonKey,
  SUPABASE_PUBLIC_ANON_KEY: resolvedAnonKey,
  NEXT_PUBLIC_SUPABASE_ANON_KEY: resolvedAnonKey,
  PUBLIC_SUPABASE_URL: resolvedUrl,
  PUBLIC_SUPABASE_PUBLISHABLE_KEY: resolvedAnonKey,
  PUBLIC_SUPABASE_ANON_KEY: resolvedAnonKey,
}

const content = `// Generated by scripts/generate-env.js
export const SUPABASE_DATABASE_URL = ${JSON.stringify(resolvedUrl)};
export const SUPABASE_URL = ${JSON.stringify(resolvedUrl)};
export const SUPABASE_ANON_KEY = ${JSON.stringify(resolvedAnonKey)};
export const SUPABASE_PUBLIC_ANON_KEY = ${JSON.stringify(resolvedAnonKey)};
export const NEXT_PUBLIC_SUPABASE_URL = ${JSON.stringify(resolvedUrl)};
export const NEXT_PUBLIC_SUPABASE_DATABASE_URL = ${JSON.stringify(resolvedUrl)};
export const NEXT_PUBLIC_SUPABASE_ANON_KEY = ${JSON.stringify(resolvedAnonKey)};

if (typeof window !== 'undefined') {
  window._env_ = ${JSON.stringify(envPayload, null, 2)};
}
`

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const dest = path.join(__dirname, '..', 'assets', 'js', 'env.js')
mkdirSync(path.dirname(dest), { recursive: true })
writeFileSync(dest, content)
console.log('Environment file generated at', dest)
