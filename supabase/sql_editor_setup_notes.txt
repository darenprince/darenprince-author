# Supabase SQL Migration: Documentation and Lessons Learned

## Overview
This document explains the full migration we created to provision a Supabase project with:
- `profiles` table linked to `auth.users`
- `folder_access` table with RLS
- `profile_audit` table with triggers
- Safe creation of the `profile_role` enum
- Storage buckets (`avatars`, `user-data`) with RLS and ownership-aware policies

We also document challenges encountered, how we resolved them, and best practices for writing robust SQL for Supabase.

---

## Key Steps in the Migration

### 1. Enum Creation (profile_role)
- **Problem:** Supabase/Postgres does not support `CREATE TYPE IF NOT EXISTS` for enums.  
- **Solution:** Wrapped `CREATE TYPE` inside a `DO $$` block that queries system catalogs and only creates the type if it does not exist.

### 2. Profiles Table
- Created with identity `id` and foreign key to `auth.users(id)`.
- Backward compatibility: added a block to detect legacy tables where `id` was UUID and migrate them to identity + `user_id`.

### 3. RLS on Profiles
- Enabled RLS.  
- Added four policies (`select`, `insert`, `update`, `delete`) tied to `auth.uid()`.  
- Ensured `UNIQUE(user_id)` constraint and `FOREIGN KEY` consistency.

### 4. Sync with Auth
- Added a trigger `sync_profile_from_auth` that keeps `profiles` aligned with `auth.users.raw_user_meta_data`.
- Included a backfill step to populate `profiles` for existing `auth.users`.

### 5. Folder Access
- `folder_access` tracks shared files per user.  
- RLS enforces user isolation with policies.

### 6. Profile Audit
- **Problem 1:** Old rows in `profile_audit` had bad/NULL values in `action`.  
- **Fix:** Before adding a CHECK constraint, normalized all rows (`NULL` → `'update'`, uppercase → lowercase).  
- **Problem 2:** Trigger was inserting uppercase `'INSERT'`.  
- **Fix:** Rewrote trigger to always insert `lower(TG_OP)` so actions match constraint.  
- Added safe recreation of CHECK (`NOT VALID` then `VALIDATE`) to avoid mid-migration failures.

### 7. Storage Buckets & Policies
- **Problem:** Current role lacked ownership of `storage.objects` → `ALTER TABLE ... ENABLE ROW LEVEL SECURITY` failed.  
- **Fix:** Wrapped storage section in a `DO` block that checks privileges (`has_table_privilege`).  
- If user lacks `ALTER` on `storage.objects`, skip setup gracefully.  
- Detects whether column is `owner_id` or `owner` and creates policies accordingly.

---

## Challenges & Resolutions

1. **Enum Creation Error (NOT EXISTS not supported)**  
   - **Error:** `syntax error at or near "NOT"` when creating type.  
   - **Fix:** Use catalog check inside `DO $$` block with dynamic `EXECUTE`.

2. **Audit Table Constraint Violation**  
   - **Error:** Existing rows violated new CHECK.  
   - **Fix:** Normalize rows before adding constraint, then `VALIDATE`.

3. **Trigger Inserted Uppercase Actions**  
   - **Error:** Trigger inserted `'INSERT'` which failed constraint.  
   - **Fix:** Use `lower(TG_OP)` in trigger to ensure lowercase.

4. **Permission Error on storage.objects**  
   - **Error:** `must be owner of table objects`.  
   - **Fix:** Privilege-aware `DO` block that checks `has_table_privilege`. Skips policies if insufficient privileges.

---

## Best Practices for Supabase SQL Migrations

- **Always wrap non-idempotent commands in `DO $$` blocks.**  
- **Use `NOT VALID` + `VALIDATE`** when adding constraints to existing tables with data.  
- **Normalize data before enforcing constraints.**  
- **Check privileges before altering Supabase system tables.**  
- **Revoke execute from sensitive trigger functions** to avoid misuse.  
- **Design migrations to be re-runnable** by using `IF NOT EXISTS` or catalog checks.

---

## How to Create Buckets in Supabase

### Option 1: SQL (if you have privilege)
```sql
INSERT INTO storage.buckets (id, name, public)
VALUES ('avatars','avatars', true),
       ('user-data','user-data', false)
ON CONFLICT (id) DO NOTHING;
```

### Option 2: Supabase Dashboard
1. Go to **Dashboard → Storage → Buckets**.  
2. Click **New bucket**.  
3. Enter `avatars`, set to **public**.  
4. Enter `user-data`, set to **private**.  

### Option 3: Supabase Client Library (JavaScript)
```javascript
const { data, error } = await supabase
  .storage
  .createBucket('avatars', { public: true });

await supabase.storage.createBucket('user-data', { public: false });
```

---

## Next Steps

- Save this file as `supabase/sql_editor_setup.sql` for migrations.  
- Maintain this TXT doc as `supabase/sql_editor_setup_notes.txt`.  
- Use the lessons learned here as a reference whenever extending schema or RLS.
